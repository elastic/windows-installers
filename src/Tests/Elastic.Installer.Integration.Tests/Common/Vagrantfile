# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|

  # when running locally
  config.vm.define "local" do |local|
    local.vm.box = "elastic/windows-2012_r2-x86_64"
	local.vm.provider "virtualbox" do |vb, override|
      #vb.gui = true
	  vb.memory = "4096"
	end
	
    local.vm.synced_folder "./../../Common/", "/common"
    local.vm.synced_folder "./../../../../../build/out/", "/out"
    
    local.vm.provision "powershellget", type: "shell", inline: configure_powershellget()  
  end

  # when running in CI
  config.vm.define "azure" do |azure|
	azure.vm.box = "azure"
	azure.vm.communicator = :winrm
	azure.vm.guest = :windows

    azure.vm.provider "azure" do |azure, override|
      azure.tenant_id = ENV['AZURE_TENANT_ID']
      azure.client_id = ENV['AZURE_CLIENT_ID']
      azure.client_secret = ENV['AZURE_CLIENT_SECRET']
      azure.subscription_id = ENV['AZURE_SUBSCRIPTION_ID']

      azure.vm_name = "msiintegration"
      azure.dns_name = "AZURE_DNS_NAME"
      azure.vm_image_urn = 'MicrosoftWindowsServer:WindowsServer:2012-R2-Datacenter-smalldisk:latest'
      azure.vm_password = ENV['AZURE_VM_PASSWORD']
      azure.admin_username = ENV['AZURE_ADMIN_USERNAME']
	  azure.admin_password = ENV['AZURE_ADMIN_PASSWORD']

	  azure.instance_ready_timeout = 600
	  azure.instance_check_interval = 60
	  azure.wait_for_destroy = true
	  azure.resource_group_name = "AZURE_RESOURCE_GROUP_NAME"
	  azure.location = "WestEurope"

	  # use winrm in PowerShell to copy files across and back on Azure. Disable automatic syncing
	  # of vagrant synced folder
	  override.vm.synced_folder ".", "/vagrant", disabled: true
      override.winrm.transport = :ssl
      override.winrm.port = 5986
      override.winrm.ssl_peer_verification = false # must be false if using a self signed cert
    end

    azure.vm.provision "chocolatey", 	type: "shell", inline: configure_chocolatey() 
    azure.vm.provision "powershellget", type: "shell", inline: configure_powershellget()   
    azure.vm.provision "java", 			type: "shell", inline: configure_java()  
  end

end

def configure_chocolatey()
  return <<-SHELL
    iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
  SHELL
end

def configure_powershellget()
  return <<-SHELL
    choco install powershell-packagemanagement -y
    Install-PackageProvider -Name NuGet -RequiredVersion 2.8.5.201 -Force
  SHELL
end

def configure_java()
  return <<-SHELL
    choco install jdk8 -y
  SHELL
end