//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Elastic.Installer.UI.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class ViewResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ViewResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Elastic.Installer.UI.Properties.ViewResources", typeof(ViewResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://www.elastic.co/guide/en/elasticsearch/client/index.html.
        /// </summary>
        public static string ClosingView_Elasticsearch_OpenFindYourClient {
            get {
                return ResourceManager.GetString("ClosingView_Elasticsearch_OpenFindYourClient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://www.elastic.co/guide/en/elasticsearch/guide/index.html.
        /// </summary>
        public static string ClosingView_Elasticsearch_OpenGettingStarted {
            get {
                return ResourceManager.GetString("ClosingView_Elasticsearch_OpenGettingStarted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://www.elastic.co/guide/en/elasticsearch/reference/{0}/index.html.
        /// </summary>
        public static string ClosingView_Elasticsearch_OpenReference {
            get {
                return ResourceManager.GetString("ClosingView_Elasticsearch_OpenReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open Elasticsearch in the browser.
        /// </summary>
        public static string ClosingView_ElasticsearchRunningAtHeader {
            get {
                return ResourceManager.GetString("ClosingView_ElasticsearchRunningAtHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open Elasticsearch in the browser (User name: elastic, Password: changeme).
        /// </summary>
        public static string ClosingView_ElasticsearchRunningAtHeaderWithCredentials {
            get {
                return ResourceManager.GetString("ClosingView_ElasticsearchRunningAtHeaderWithCredentials", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Find a client for your favorite language.
        /// </summary>
        public static string ClosingView_FindYourClient {
            get {
                return ResourceManager.GetString("ClosingView_FindYourClient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://github.com/elastic/windows-installers/issues.
        /// </summary>
        public static string ClosingView_GithubIssues {
            get {
                return ResourceManager.GetString("ClosingView_GithubIssues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to installation.
        /// </summary>
        public static string ClosingView_InstallationText {
            get {
                return ResourceManager.GetString("ClosingView_InstallationText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to installed.
        /// </summary>
        public static string ClosingView_InstalledText {
            get {
                return ResourceManager.GetString("ClosingView_InstalledText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://www.elastic.co/guide/en/kibana/{0}/getting-started.html.
        /// </summary>
        public static string ClosingView_Kibana_OpenGettingStarted {
            get {
                return ResourceManager.GetString("ClosingView_Kibana_OpenGettingStarted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://www.elastic.co/guide/en/kibana/{0}/index.html.
        /// </summary>
        public static string ClosingView_Kibana_OpenReference {
            get {
                return ResourceManager.GetString("ClosingView_Kibana_OpenReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open Kibana in the browser.
        /// </summary>
        public static string ClosingView_KibanaRunningAtHeader {
            get {
                return ResourceManager.GetString("ClosingView_KibanaRunningAtHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open Kibana in the browser (User name: elastic, Password: changeme).
        /// </summary>
        public static string ClosingView_KibanaRunningAtHeaderWithCredentials {
            get {
                return ResourceManager.GetString("ClosingView_KibanaRunningAtHeaderWithCredentials", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open the Elasticsearch log file.
        /// </summary>
        public static string ClosingView_OpenElasticsearchLog {
            get {
                return ResourceManager.GetString("ClosingView_OpenElasticsearchLog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open the installation log file.
        /// </summary>
        public static string ClosingView_OpenInstallationLog {
            get {
                return ResourceManager.GetString("ClosingView_OpenInstallationLog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Report the issue on our GitHub issues page.
        /// </summary>
        public static string ClosingView_OpenIssues {
            get {
                return ResourceManager.GetString("ClosingView_OpenIssues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to We&apos;ll just assume you hit the cancel button by accident, no hard feelings!.
        /// </summary>
        public static string ClosingView_ParagraphCancelled {
            get {
                return ResourceManager.GetString("ClosingView_ParagraphCancelled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is very unfortunate and not something we&apos;d hope to repeat.  Please let us know by filing an issue on our GitHub issues page..
        /// </summary>
        public static string ClosingView_ParagraphFailed {
            get {
                return ResourceManager.GetString("ClosingView_ParagraphFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more pre-requisites are not satisfied. Try fixing these and re-running the installer..
        /// </summary>
        public static string ClosingView_ParagraphPreempted {
            get {
                return ResourceManager.GetString("ClosingView_ParagraphPreempted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Read &quot;The Definitive Guide&quot; for free online!.
        /// </summary>
        public static string ClosingView_ReadDefinitiveGuide {
            get {
                return ResourceManager.GetString("ClosingView_ReadDefinitiveGuide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Read the &quot;Getting Started&quot; guide.
        /// </summary>
        public static string ClosingView_ReadGettingStarted {
            get {
                return ResourceManager.GetString("ClosingView_ReadGettingStarted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open the Elastic Stack documentation after exiting.
        /// </summary>
        public static string ClosingView_ReadTheDocsOnCloseCheckBox {
            get {
                return ResourceManager.GetString("ClosingView_ReadTheDocsOnCloseCheckBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Read the {0} API reference.
        /// </summary>
        public static string ClosingView_ReadTheReference {
            get {
                return ResourceManager.GetString("ClosingView_ReadTheReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Diagnose and Report.
        /// </summary>
        public static string ClosingView_SubTitleFailed {
            get {
                return ResourceManager.GetString("ClosingView_SubTitleFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What&apos;s Next?.
        /// </summary>
        public static string ClosingView_SubTitleSuccess {
            get {
                return ResourceManager.GetString("ClosingView_SubTitleSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} was cancelled..
        /// </summary>
        public static string ClosingView_TitleCancelled {
            get {
                return ResourceManager.GetString("ClosingView_TitleCancelled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occured during {0}!.
        /// </summary>
        public static string ClosingView_TitleFailed {
            get {
                return ResourceManager.GetString("ClosingView_TitleFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} can not run at this time.
        /// </summary>
        public static string ClosingView_TitlePreempted {
            get {
                return ResourceManager.GetString("ClosingView_TitlePreempted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} {1} successfully!.
        /// </summary>
        public static string ClosingView_TitleSuccess {
            get {
                return ResourceManager.GetString("ClosingView_TitleSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to upgraded.
        /// </summary>
        public static string ClosingView_UpgradedText {
            get {
                return ResourceManager.GetString("ClosingView_UpgradedText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to upgrade.
        /// </summary>
        public static string ClosingView_UpgradeText {
            get {
                return ResourceManager.GetString("ClosingView_UpgradeText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Each value is either in the form of host or host:port. Invalid values will be ignored. Multiple values separated by a comma can be specified..
        /// </summary>
        public static string ConfigurationView_AddUnicastNode_Message {
            get {
                return ResourceManager.GetString("ConfigurationView_AddUnicastNode_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add unicast node.
        /// </summary>
        public static string ConfigurationView_AddUnicastNode_Title {
            get {
                return ResourceManager.GetString("ConfigurationView_AddUnicastNode_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allow anonymous access.
        /// </summary>
        public static string ConfigurationView_AllowAnonymousAccessLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_AllowAnonymousAccessLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Base Path.
        /// </summary>
        public static string ConfigurationView_BasePathLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_BasePathLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browse.
        /// </summary>
        public static string ConfigurationView_BrowseButton {
            get {
                return ResourceManager.GetString("ConfigurationView_BrowseButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifiers.
        /// </summary>
        public static string ConfigurationView_ClusterLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_ClusterLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cluster name.
        /// </summary>
        public static string ConfigurationView_ClusterNameLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_ClusterNameLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make this a data node.
        /// </summary>
        public static string ConfigurationView_DataNodeCheckBox {
            get {
                return ResourceManager.GetString("ConfigurationView_DataNodeCheckBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default Route.
        /// </summary>
        public static string ConfigurationView_DefaultRouteLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_DefaultRouteLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Discovery.
        /// </summary>
        public static string ConfigurationView_DiscoveryLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_DiscoveryLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This step allows you to specify some settings found in the [b]elasticsearch.yml[/b] and [b]jvm.options[/b] files located in the [b]config[/b] folder.  We&apos;re only exposing common settings here that you almost always want to change.  Any options not shown here must be set manually in the files after the installation has been completed.
        ///
        ///
        ///[b]Cluster name[/b]: The name of the cluster this Elasticsearch node should be a part of.  The cluster name is used to discover and auto-join other nodes.  It is important [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ConfigurationView_Elasticsearch_Help {
            get {
                return ResourceManager.GetString("ConfigurationView_Elasticsearch_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuration Help.
        /// </summary>
        public static string ConfigurationView_Elasticsearch_Help_Header {
            get {
                return ResourceManager.GetString("ConfigurationView_Elasticsearch_Help_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Host.
        /// </summary>
        public static string ConfigurationView_HostNameLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_HostNameLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HTTP port.
        /// </summary>
        public static string ConfigurationView_HttpPortLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_HttpPortLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make this an ingest node.
        /// </summary>
        public static string ConfigurationView_IngestNodeCheckBox {
            get {
                return ResourceManager.GetString("ConfigurationView_IngestNodeCheckBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This step allows you to specify some settings found in the [b]kibana.yml[/b] located in the [b]config[/b] folder.  We&apos;re only exposing common settings here that you may commonly want to change.  Any options not shown here must be set manually in the files after the installation has been completed.
        ///
        ///
        ///[b]Host[/b]: This setting specifies the host of the back end server.
        ///
        ///[b]Server name[/b]: A human-readable display name that identifies this Kibana instance.
        ///
        ///[b]Base Path[/b]: Enables you to specify a pa [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ConfigurationView_Kibana_Help {
            get {
                return ResourceManager.GetString("ConfigurationView_Kibana_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lock JVM memory.
        /// </summary>
        public static string ConfigurationView_LockMemoryCheckBox {
            get {
                return ResourceManager.GetString("ConfigurationView_LockMemoryCheckBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Make this a master-eligible node.
        /// </summary>
        public static string ConfigurationView_MasterNodeCheckBox {
            get {
                return ResourceManager.GetString("ConfigurationView_MasterNodeCheckBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Memory.
        /// </summary>
        public static string ConfigurationView_MemoryLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_MemoryLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Min master nodes.
        /// </summary>
        public static string ConfigurationView_MinimumMasterLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_MinimumMasterLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  Minimum master nodes not set.
        /// </summary>
        public static string ConfigurationView_MinimumMasterNodesNotSet {
            get {
                return ResourceManager.GetString("ConfigurationView_MinimumMasterNodesNotSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  {0} minimum master-eligible nodes.
        /// </summary>
        public static string ConfigurationView_MinimumMasterNodesSet {
            get {
                return ResourceManager.GetString("ConfigurationView_MinimumMasterNodesSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Network host.
        /// </summary>
        public static string ConfigurationView_NetworkHostLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_NetworkHostLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Network.
        /// </summary>
        public static string ConfigurationView_NetworkLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_NetworkLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Roles.
        /// </summary>
        public static string ConfigurationView_NodeBehaviorLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_NodeBehaviorLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Node name.
        /// </summary>
        public static string ConfigurationView_NodeNameLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_NodeNameLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (Optional).
        /// </summary>
        public static string ConfigurationView_OptionalLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_OptionalLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Routing.
        /// </summary>
        public static string ConfigurationView_RoutingLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_RoutingLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security.
        /// </summary>
        public static string ConfigurationView_SecurityLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_SecurityLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server Certificate.
        /// </summary>
        public static string ConfigurationView_ServerCertLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_ServerCertLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server Key.
        /// </summary>
        public static string ConfigurationView_ServerKeyLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_ServerKeyLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server.
        /// </summary>
        public static string ConfigurationView_ServerLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_ServerLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server Name.
        /// </summary>
        public static string ConfigurationView_ServerNameLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_ServerNameLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Max.
        /// </summary>
        public static string ConfigurationView_SliderLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_SliderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transport port.
        /// </summary>
        public static string ConfigurationView_TransportPortLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_TransportPortLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        public static string ConfigurationView_UnicastExplanationLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_UnicastExplanationLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unicast Hosts.
        /// </summary>
        public static string ConfigurationView_UnicastHostsLabel {
            get {
                return ResourceManager.GetString("ConfigurationView_UnicastHostsLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browse.
        /// </summary>
        public static string ConnectingView_BrowseButton {
            get {
                return ResourceManager.GetString("ConnectingView_BrowseButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Certificates.
        /// </summary>
        public static string ConnectingView_CertificatesLabel {
            get {
                return ResourceManager.GetString("ConnectingView_CertificatesLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Credentials.
        /// </summary>
        public static string ConnectingView_CredentialsLabel {
            get {
                return ResourceManager.GetString("ConnectingView_CredentialsLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Elasticsearch CA.
        /// </summary>
        public static string ConnectingView_ElasticsearchCALabel {
            get {
                return ResourceManager.GetString("ConnectingView_ElasticsearchCALabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Elasticsearch Cert.
        /// </summary>
        public static string ConnectingView_ElasticsearchCertLabel {
            get {
                return ResourceManager.GetString("ConnectingView_ElasticsearchCertLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Elasticsearch Key.
        /// </summary>
        public static string ConnectingView_ElasticsearchKeyLabel {
            get {
                return ResourceManager.GetString("ConnectingView_ElasticsearchKeyLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Elasticsearch.
        /// </summary>
        public static string ConnectingView_ElasticsearchLabel {
            get {
                return ResourceManager.GetString("ConnectingView_ElasticsearchLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Index Name.
        /// </summary>
        public static string ConnectingView_IndexNameLabel {
            get {
                return ResourceManager.GetString("ConnectingView_IndexNameLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This step allows you to specify some settings for connecting to your Elasticsearch cluster.
        ///
        ///
        ///[b]URL[/b]: The URL of the Elasticsearch instance to use for all your queries.
        ///
        ///[b]Index Name[/b]: Kibana uses an index in Elasticsearch to store saved searches, visualizations and dashboards. Kibana creates a new index if the index doesn’t already exist.
        ///
        ///[b]Username[/b] and [b]Password[/b]: If your Elasticsearch is protected with basic authentication, these settings provide the username and password that t [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ConnectingView_Kibana_Help {
            get {
                return ResourceManager.GetString("ConnectingView_Kibana_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password.
        /// </summary>
        public static string ConnectingView_PasswordLabel {
            get {
                return ResourceManager.GetString("ConnectingView_PasswordLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to URL.
        /// </summary>
        public static string ConnectingView_UrlLabel {
            get {
                return ResourceManager.GetString("ConnectingView_UrlLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Username.
        /// </summary>
        public static string ConnectingView_UsernameLabel {
            get {
                return ResourceManager.GetString("ConnectingView_UsernameLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the cluster. Defaults to {0}.
        /// </summary>
        public static string InstallOptions_ClusterName {
            get {
                return ResourceManager.GetString("InstallOptions_ClusterName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The config directory. Defaults to {0}.
        /// </summary>
        public static string InstallOptions_ConfigDirectory {
            get {
                return ResourceManager.GetString("InstallOptions_ConfigDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data directory. Defaults to {0}.
        /// </summary>
        public static string InstallOptions_DataDirectory {
            get {
                return ResourceManager.GetString("InstallOptions_DataDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether this node is a DataText node. Defaults to {0}.
        /// </summary>
        public static string InstallOptions_DataNode {
            get {
                return ResourceManager.GetString("InstallOptions_DataNode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The heap memory that will be allocated to the Elasticsearch Java Process. This should be more than 250mb and ideally less than 32GB (so that Java uses compressed pointers). Defaults to {0}mb for this installation.
        /// </summary>
        public static string InstallOptions_HeapSize {
            get {
                return ResourceManager.GetString("InstallOptions_HeapSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether this node is an Ingest node. Defaults to {0}.
        /// </summary>
        public static string InstallOptions_IngestNode {
            get {
                return ResourceManager.GetString("InstallOptions_IngestNode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The installation directory. Defaults to {0}.
        /// </summary>
        public static string InstallOptions_InstallDirectory {
            get {
                return ResourceManager.GetString("InstallOptions_InstallDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to lock the process address space in RAM, preventing any Elasticsearch memory from being swapped out. This uses VirtualLock on Windows. Defaults to {0}.
        /// </summary>
        public static string InstallOptions_LockMemory {
            get {
                return ResourceManager.GetString("InstallOptions_LockMemory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The logs directory. Defaults to {0}.
        /// </summary>
        public static string InstallOptions_LogsDirectory {
            get {
                return ResourceManager.GetString("InstallOptions_LogsDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether this node is a Master node. Defaults to {0}.
        /// </summary>
        public static string InstallOptions_MasterNode {
            get {
                return ResourceManager.GetString("InstallOptions_MasterNode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the node. Defaults to {0} for this installation.
        /// </summary>
        public static string InstallOptions_NodeName {
            get {
                return ResourceManager.GetString("InstallOptions_NodeName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A comma-separated list of plugins to install as part of the Elasticsearch installation.
        /// </summary>
        public static string InstallOptions_Plugins {
            get {
                return ResourceManager.GetString("InstallOptions_Plugins", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to automatically start the service after Windows starts/restarts, if installing as a Windows Service. Defaults to {0}.
        /// </summary>
        public static string InstallOptions_ServiceAutomatic {
            get {
                return ResourceManager.GetString("InstallOptions_ServiceAutomatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to install Elasticsearch as a Windows service. Defaults to {0}.
        /// </summary>
        public static string InstallOptions_ServiceInstall {
            get {
                return ResourceManager.GetString("InstallOptions_ServiceInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the Windows service, if installing as a Windows Service. Defaults to {0}.
        /// </summary>
        public static string InstallOptions_ServiceName {
            get {
                return ResourceManager.GetString("InstallOptions_ServiceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password for the specified Username, if installing as a Windows Service.
        /// </summary>
        public static string InstallOptions_ServicePassword {
            get {
                return ResourceManager.GetString("InstallOptions_ServicePassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to run the service using {0} if installing as a Windows Service. Defaults to {1}. If this value is false and {2} is not specified, the service will be run using {3}.
        /// </summary>
        public static string InstallOptions_ServiceRunAsNetworkService {
            get {
                return ResourceManager.GetString("InstallOptions_ServiceRunAsNetworkService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to start the service after installation, if installing as a Windows Service. Defaults to {0}.
        /// </summary>
        public static string InstallOptions_ServiceStart {
            get {
                return ResourceManager.GetString("InstallOptions_ServiceStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to run the service using a specified Username, if installing as a Windows Service.
        /// </summary>
        public static string InstallOptions_ServiceUsername {
            get {
                return ResourceManager.GetString("InstallOptions_ServiceUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A comma-separated list of hosts to use for unicast discovery.
        /// </summary>
        public static string InstallOptions_UnicastHosts {
            get {
                return ResourceManager.GetString("InstallOptions_UnicastHosts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browse.
        /// </summary>
        public static string LocationsView_ConfigDirectoryBrowseButton {
            get {
                return ResourceManager.GetString("LocationsView_ConfigDirectoryBrowseButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuration directory.
        /// </summary>
        public static string LocationsView_ConfigDirectoryLabel {
            get {
                return ResourceManager.GetString("LocationsView_ConfigDirectoryLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a custom installation directory.
        /// </summary>
        public static string LocationsView_CustomLocationsRadioButton {
            get {
                return ResourceManager.GetString("LocationsView_CustomLocationsRadioButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browse.
        /// </summary>
        public static string LocationsView_DataDirectoryBrowseButton {
            get {
                return ResourceManager.GetString("LocationsView_DataDirectoryBrowseButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data directory.
        /// </summary>
        public static string LocationsView_DataDirectoryLabel {
            get {
                return ResourceManager.GetString("LocationsView_DataDirectoryLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use default directories.
        /// </summary>
        public static string LocationsView_DefaultLocationsRadioButton {
            get {
                return ResourceManager.GetString("LocationsView_DefaultLocationsRadioButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Elasticsearch has several different folders that it needs to have read and/or write access to:
        ///
        ///[b]Home[/b]: The directory where the Elasticsearch binaries, plugins, and scripts are installed to.
        ///
        ///[b]Data[/b]: The directory where Elasticsearch stores your data.
        ///
        ///[b]Logs[/b]: The directory where Elasticsearch will write its log files to.
        ///
        ///[b]Config[/b]: The directory where Elasticsearch will store its configuration files.
        ///
        ///It is a best practice to keep your logs, config, and data directories separa [rest of string was truncated]&quot;;.
        /// </summary>
        public static string LocationsView_Elasticsearch_Help {
            get {
                return ResourceManager.GetString("LocationsView_Elasticsearch_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Locations Help.
        /// </summary>
        public static string LocationsView_Elasticsearch_Help_Header {
            get {
                return ResourceManager.GetString("LocationsView_Elasticsearch_Help_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place logs, data, and config in the same directory.
        /// </summary>
        public static string LocationsView_ElasticsearchCustomLocationsCheckBox {
            get {
                return ResourceManager.GetString("LocationsView_ElasticsearchCustomLocationsCheckBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation directory.
        /// </summary>
        public static string LocationsView_InstallationDirectoryLabel {
            get {
                return ResourceManager.GetString("LocationsView_InstallationDirectoryLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browse.
        /// </summary>
        public static string LocationsView_InstallDirectoryBrowseButton {
            get {
                return ResourceManager.GetString("LocationsView_InstallDirectoryBrowseButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Kibana has several different folders that it needs to have read and/or write access to:
        ///
        ///[b]Home[/b]: The directory where the Kibana binaries, plugins, and scripts are installed to.
        ///
        ///[b]Logs[/b]: The directory where Kibana will write its log files to.
        ///.
        /// </summary>
        public static string LocationsView_Kibana_Help {
            get {
                return ResourceManager.GetString("LocationsView_Kibana_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Place logs in the same directory.
        /// </summary>
        public static string LocationsView_KibanaCustomLocationsCheckBox {
            get {
                return ResourceManager.GetString("LocationsView_KibanaCustomLocationsCheckBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Browse.
        /// </summary>
        public static string LocationsView_LogsDirectoryBrowseButton {
            get {
                return ResourceManager.GetString("LocationsView_LogsDirectoryBrowseButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logs directory.
        /// </summary>
        public static string LocationsView_LogsDirectoryLabel {
            get {
                return ResourceManager.GetString("LocationsView_LogsDirectoryLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://www.elastic.co/guide/index.html.
        /// </summary>
        public static string MainWindow_DocumentationLink {
            get {
                return ResourceManager.GetString("MainWindow_DocumentationLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Heya! Welcome the {0} Windows intaller.
        ///
        ///This installer will walk you through various steps to help you configure and install {0} on your system.  To make things easier, we&apos;ve gone ahead and pre-populated everything with all of the sensible defaults, but there are a few things you may want to change..
        /// </summary>
        public static string MainWindow_Help {
            get {
                return ResourceManager.GetString("MainWindow_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installation Help.
        /// </summary>
        public static string MainWindow_Help_Header {
            get {
                return ResourceManager.GetString("MainWindow_Help_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installing Elasticsearch {0}.
        /// </summary>
        public static string MainWindow_InstallingMessage {
            get {
                return ResourceManager.GetString("MainWindow_InstallingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installing....
        /// </summary>
        public static string MainWindow_InstallingTitle {
            get {
                return ResourceManager.GetString("MainWindow_InstallingTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to License Information.
        /// </summary>
        public static string MainWindow_LicenseHeader {
            get {
                return ResourceManager.GetString("MainWindow_LicenseHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Except as otherwise noted, Elasticsearch is distributed and licensed 
        ///under the Apache 2.0 License.
        ///X-Pack is a proprietary plugin that falls under the Elastic EULA..
        /// </summary>
        public static string MainWindow_LicenseInformation {
            get {
                return ResourceManager.GetString("MainWindow_LicenseInformation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pre-requisite Errors.
        /// </summary>
        public static string MainWindow_PrequisiteErrors {
            get {
                return ResourceManager.GetString("MainWindow_PrequisiteErrors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to I have fixed this!.
        /// </summary>
        public static string MainWindow_PrequisiteFixed {
            get {
                return ResourceManager.GetString("MainWindow_PrequisiteFixed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quit installation.
        /// </summary>
        public static string MainWindow_QuitInstallation {
            get {
                return ResourceManager.GetString("MainWindow_QuitInstallation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuration.
        /// </summary>
        public static string MainWindow_TabItemConfiguration {
            get {
                return ResourceManager.GetString("MainWindow_TabItemConfiguration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Locations.
        /// </summary>
        public static string MainWindow_TabItemLocations {
            get {
                return ResourceManager.GetString("MainWindow_TabItemLocations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Plugins.
        /// </summary>
        public static string MainWindow_TabItemPlugins {
            get {
                return ResourceManager.GetString("MainWindow_TabItemPlugins", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service.
        /// </summary>
        public static string MainWindow_TabItemService {
            get {
                return ResourceManager.GetString("MainWindow_TabItemService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Welcome.
        /// </summary>
        public static string MainWindow_TabItemWelcome {
            get {
                return ResourceManager.GetString("MainWindow_TabItemWelcome", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Elasticsearch {0} Installation.
        /// </summary>
        public static string MainWindow_Title {
            get {
                return ResourceManager.GetString("MainWindow_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validation Error.
        /// </summary>
        public static string MainWindow_ValidationError {
            get {
                return ResourceManager.GetString("MainWindow_ValidationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validation Errors.
        /// </summary>
        public static string MainWindow_ValidationErrors {
            get {
                return ResourceManager.GetString("MainWindow_ValidationErrors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://www.elastic.co/guide/en/elasticsearch/reference/{0}/setup-upgrade.html.
        /// </summary>
        public static string NoticeView_Elasticsearch_ReadMoreOnUpgrades {
            get {
                return ResourceManager.GetString("NoticeView_Elasticsearch_ReadMoreOnUpgrades", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Read the upgrade documentation to learn more.
        /// </summary>
        public static string NoticeView_ReadMoreOnUpgrades {
            get {
                return ResourceManager.GetString("NoticeView_ReadMoreOnUpgrades", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Read only properties from previous installation.
        /// </summary>
        public static string NoticeView_ReadOnlyPropertiesHeader {
            get {
                return ResourceManager.GetString("NoticeView_ReadOnlyPropertiesHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install as a service.
        /// </summary>
        public static string NoticeView_RunAsServiceHeaderLabel {
            get {
                return ResourceManager.GetString("NoticeView_RunAsServiceHeaderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This version of Elasticsearch is already installed..
        /// </summary>
        public static string NoticeViewModelValidator_AlreadyInstalled {
            get {
                return ResourceManager.GetString("NoticeViewModelValidator_AlreadyInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error in the MSI prevents us from installing..
        /// </summary>
        public static string NoticeViewModelValidator_CanInstall {
            get {
                return ResourceManager.GetString("NoticeViewModelValidator_CanInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find a valid Java installation..
        /// </summary>
        public static string NoticeViewModelValidator_JavaInstalled {
            get {
                return ResourceManager.GetString("NoticeViewModelValidator_JavaInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Plugins are a way to enhance the core Elasticsearch functionality.  They range from adding custom mapping types, custom analyzers (in a more built-in fashion), custom discovery, and more.
        ///
        ///We&apos;ve only listed the official Elasticsearch plugins here, but there are many more community plugins that can be installed manually..
        /// </summary>
        public static string PluginsView_Elasticsearch_Help {
            get {
                return ResourceManager.GetString("PluginsView_Elasticsearch_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Plugin Help.
        /// </summary>
        public static string PluginsView_Elasticsearch_Help_Header {
            get {
                return ResourceManager.GetString("PluginsView_Elasticsearch_Help_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Plugins are a way to enhance the basic Kibana functionality in a custom manner.  We&apos;ve only listed the official Kibanas plugins here, but there are many more community plugins that can be installed manually..
        /// </summary>
        public static string PluginsView_Kibana_Help {
            get {
                return ResourceManager.GetString("PluginsView_Kibana_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Analysis.
        /// </summary>
        public static string PluginType_Analysis {
            get {
                return ResourceManager.GetString("PluginType_Analysis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to API Extensions.
        /// </summary>
        public static string PluginType_ApiExtensions {
            get {
                return ResourceManager.GetString("PluginType_ApiExtensions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Discovery.
        /// </summary>
        public static string PluginType_Discovery {
            get {
                return ResourceManager.GetString("PluginType_Discovery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ingest.
        /// </summary>
        public static string PluginType_Ingest {
            get {
                return ResourceManager.GetString("PluginType_Ingest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mapper.
        /// </summary>
        public static string PluginType_Mapper {
            get {
                return ResourceManager.GetString("PluginType_Mapper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scripting.
        /// </summary>
        public static string PluginType_Scripting {
            get {
                return ResourceManager.GetString("PluginType_Scripting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Snapshot.
        /// </summary>
        public static string PluginType_Snapshot {
            get {
                return ResourceManager.GetString("PluginType_Snapshot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Store.
        /// </summary>
        public static string PluginType_Store {
            get {
                return ResourceManager.GetString("PluginType_Store", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to X-Pack.
        /// </summary>
        public static string PluginType_XPack {
            get {
                return ResourceManager.GetString("PluginType_XPack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to General properties.
        /// </summary>
        public static string ServiceView_ConfigurationLabel {
            get {
                return ResourceManager.GetString("ServiceView_ConfigurationLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By default, Elasticsearch will be installed as a service.
        ///
        ///This step allows you to configure the Windows user to run the service with, as well as when the service should be started.
        ///
        ///Alternatively, you may choose to not install Elasticsearch as a service and run it manually as needed from the command line..
        /// </summary>
        public static string ServiceView_Elasticsearch_Help {
            get {
                return ResourceManager.GetString("ServiceView_Elasticsearch_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service Help.
        /// </summary>
        public static string ServiceView_Elasticsearch_Help_Header {
            get {
                return ResourceManager.GetString("ServiceView_Elasticsearch_Help_Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Existing user.
        /// </summary>
        public static string ServiceView_ExistingUserRadioButton {
            get {
                return ResourceManager.GetString("ServiceView_ExistingUserRadioButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install as a service.
        /// </summary>
        public static string ServiceView_InstallAsServiceRadioButton {
            get {
                return ResourceManager.GetString("ServiceView_InstallAsServiceRadioButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By default, Kibana will be installed as a service.
        ///
        ///This step allows you to configure the Windows user to run the service with, as well as when the service should be started.
        ///
        ///Alternatively, you may choose to not install Kibana as a service and run it manually as needed from the command line..
        /// </summary>
        public static string ServiceView_Kibana_Help {
            get {
                return ResourceManager.GetString("ServiceView_Kibana_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Local System account.
        /// </summary>
        public static string ServiceView_LocalSystemRadioButton {
            get {
                return ResourceManager.GetString("ServiceView_LocalSystemRadioButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Account information.
        /// </summary>
        public static string ServiceView_LogonLabel {
            get {
                return ResourceManager.GetString("ServiceView_LogonLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not install as a service (start manually when needed).
        /// </summary>
        public static string ServiceView_ManualRadioButton {
            get {
                return ResourceManager.GetString("ServiceView_ManualRadioButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use NT AUTHORITY\NETWORK SERVICE.
        /// </summary>
        public static string ServiceView_NetworkServiceRadioButton {
            get {
                return ResourceManager.GetString("ServiceView_NetworkServiceRadioButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to password.
        /// </summary>
        public static string ServiceView_PasswordLabel {
            get {
                return ResourceManager.GetString("ServiceView_PasswordLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Service name.
        /// </summary>
        public static string ServiceView_ServiceNameLabel {
            get {
                return ResourceManager.GetString("ServiceView_ServiceNameLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start the service after this installation is complete.
        /// </summary>
        public static string ServiceView_StartAfterInstallCheckBox {
            get {
                return ResourceManager.GetString("ServiceView_StartAfterInstallCheckBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Start the service when Windows starts (Automatic).
        /// </summary>
        public static string ServiceView_StartWhenWindowsStartsCheckBox {
            get {
                return ResourceManager.GetString("ServiceView_StartWhenWindowsStartsCheckBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to user.
        /// </summary>
        public static string ServiceView_UserLabel {
            get {
                return ResourceManager.GetString("ServiceView_UserLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validate.
        /// </summary>
        public static string ServiceView_ValidateLabel {
            get {
                return ResourceManager.GetString("ServiceView_ValidateLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exit.
        /// </summary>
        public static string SetupView_ExitText {
            get {
                return ResourceManager.GetString("SetupView_ExitText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install.
        /// </summary>
        public static string SetupView_InstallText {
            get {
                return ResourceManager.GetString("SetupView_InstallText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Next.
        /// </summary>
        public static string SetupView_NextText {
            get {
                return ResourceManager.GetString("SetupView_NextText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstall Elasticsearch.
        /// </summary>
        public static string SilentSetup__Uninstall {
            get {
                return ResourceManager.GetString("SilentSetup__Uninstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can not start setup because of conflicting parameters e.g specifying /i and /u.
        /// </summary>
        public static string SilentSetup_AmbiguousFlags {
            get {
                return ResourceManager.GetString("SilentSetup_AmbiguousFlags", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Options signal how and what routine the setup should run.
        /// </summary>
        public static string SilentSetup_CommandLineOptions {
            get {
                return ResourceManager.GetString("SilentSetup_CommandLineOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variables control the values used during (un)installation.
        /// </summary>
        public static string SilentSetup_CommandLineVariables {
            get {
                return ResourceManager.GetString("SilentSetup_CommandLineVariables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installs Elasticsearch on Windows. Run without arguments for interactive setup or with command line options for silent setup..
        /// </summary>
        public static string SilentSetup_Description {
            get {
                return ResourceManager.GetString("SilentSetup_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display help text and exit.
        /// </summary>
        public static string SilentSetup_Help {
            get {
                return ResourceManager.GetString("SilentSetup_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install Variables.
        /// </summary>
        public static string SilentSetup_InstallVariables {
            get {
                return ResourceManager.GetString("SilentSetup_InstallVariables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Options.
        /// </summary>
        public static string SilentSetup_Options {
            get {
                return ResourceManager.GetString("SilentSetup_Options", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Elasticsearch {0} Installer.
        /// </summary>
        public static string SilentSetup_Title {
            get {
                return ResourceManager.GetString("SilentSetup_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uninstall Variables.
        /// </summary>
        public static string SilentSetup_UninstallVariables {
            get {
                return ResourceManager.GetString("SilentSetup_UninstallVariables", resourceCulture);
            }
        }
    }
}
